/// <reference types="react" />
import * as _emotion_react_jsx_runtime from '@emotion/react/jsx-runtime';
import * as React$1 from 'react';
import React__default, { ElementType, ComponentProps, CSSProperties, ReactNode, PropsWithChildren } from 'react';

declare const standardColors$1: readonly ["green", "beige"];
type AvatarStandardColor = (typeof standardColors$1)[number];
interface AvatarProps extends Omit<React.HTMLProps<HTMLDivElement>, 'size' | 'color'> {
    text: string;
    size?: number;
    textSize?: 'small' | 'big';
    color?: AvatarStandardColor;
}
declare function Avatar({ text, size, textSize, color, style, ...restProps }: AvatarProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Avatar {
    var displayName: string;
}

interface BannerProps extends React.HTMLProps<HTMLDivElement> {
    actionTitle?: string;
    onAction?: () => void;
    onClose: () => void;
    variant?: 'info' | 'success' | 'error' | 'warning';
}
declare const Banner: {
    ({ children, onAction, actionTitle, onClose, variant, className, ...restProps }: BannerProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};

declare enum ButtonVariant {
    primary = "primary",
    primaryAlt = "primaryAlt",
    secondary = "secondary",
    tertiary = "tertiary"
}
declare enum ButtonSize {
    large = "large",
    small = "small"
}
declare enum ButtonIconPosition {
    left = "left",
    right = "right"
}
type ButtonProps<CompType extends ElementType, CompProps = ComponentProps<CompType>> = Omit<CompProps, 'disabled' | 'size' | 'className'> & {
    Component?: CompType;
    icon?: React.ReactNode;
    iconPosition?: keyof typeof ButtonIconPosition;
    loading?: boolean;
    disabled?: boolean;
    center?: boolean;
    fullWidth?: boolean;
    variant?: keyof typeof ButtonVariant;
    size?: keyof typeof ButtonSize;
    type?: 'button' | 'submit' | 'reset';
};

declare function Button<P extends ElementType>({ size, type, onClick, children, disabled, icon, iconPosition, style, center, fullWidth, loading, variant, Component, ...props }: ButtonProps<P>): _emotion_react_jsx_runtime.JSX.Element;

interface CardBaseProps {
    children: React.ReactNode;
}
interface CardDivProps extends CardBaseProps, Omit<React.HTMLProps<HTMLDivElement>, 'children' | 'onClick'> {
    onClick?: never;
}
interface CardButtonProps extends CardBaseProps, Omit<React.HTMLProps<HTMLButtonElement>, 'children' | 'onClick'> {
    onClick: () => void;
}
type CardProps = CardDivProps | CardButtonProps;
declare function Card(props: CardProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Card {
    var displayName: string;
}

interface CardWithIconProps {
    style?: CSSProperties;
    icon: ReactNode;
    title: string;
    subtitle?: ReactNode;
    flat?: boolean;
    disabled?: boolean;
    selected?: boolean;
    onClick?: () => void;
    children?: React.ReactNode | JSX.Element;
}
declare function CardWithIcon({ style, icon, title, subtitle, flat, disabled, selected, onClick, children, }: CardWithIconProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CardWithIcon {
    var displayName: string;
}

type ExtractedInputProps$3 = 'disabled' | 'checked' | 'defaultChecked' | 'id' | 'name' | 'onChange' | 'onBlur' | 'required' | 'value';
type ExtractedContainerHtmlProps$1 = 'className' | 'style';
interface BaseCheckboxProps extends Pick<React.HTMLProps<HTMLInputElement>, ExtractedInputProps$3>, Pick<React.HTMLProps<HTMLDivElement>, ExtractedContainerHtmlProps$1> {
    error?: boolean;
    fullWidth?: boolean;
    helperText?: string;
    size?: 'small' | 'large';
    variant?: 'default' | 'card';
    alternating?: boolean;
    containerHtmlProps?: Omit<React.HTMLProps<HTMLDivElement>, ExtractedContainerHtmlProps$1>;
    inputProps?: Omit<React.HTMLProps<HTMLInputElement>, ExtractedInputProps$3>;
}
type CheckboxWithLabelProps = BaseCheckboxProps & {
    label: string;
    'aria-label'?: string;
};
type CheckboxWithChildrenProps = BaseCheckboxProps & {
    label?: Exclude<React.ReactNode, string>;
    'aria-label': string;
};
type CheckboxProps = CheckboxWithLabelProps | CheckboxWithChildrenProps;
declare const Checkbox: React$1.ForwardRefExoticComponent<CheckboxProps & React$1.RefAttributes<HTMLInputElement>>;

declare const Color: {
    readonly midnight: "#213123";
    readonly midnightDark: "#000000";
    readonly midnightShade: "#325035";
    readonly green: "#00884F";
    readonly greenDark: "#005F37";
    readonly grannySmith: "#A2E96B";
    readonly grannySmithDark: "#66B728";
    readonly mint01: "#DAF4DD";
    readonly mint02: "#EDFAEE";
    readonly mint03: "#F6FDF7";
    readonly purple01: "#BCA9F1";
    readonly purple02: "#E5DAF4";
    readonly purple03: "#F2EDFA";
    readonly purple04: "#F9F6FD";
    readonly beige01: "#F1E9E2";
    readonly beige02: "#F8F4F1";
    readonly beige03: "#FCFAF8";
    readonly red01: "#EC1309";
    readonly red02: "#FFF9F9";
    readonly yellow01: "#F9C34D";
    readonly yellow02: "#FFFEF9";
    readonly white: "#FFFFFF";
    readonly grey01: "#707874";
    readonly grey02: "#BAC0BE";
    readonly grey03: "#E1E3E2";
    readonly grey04: "#F6F7F6";
    readonly grey05: "#F4F4F4";
};

interface CompanyLogoProps$1 extends Omit<React.SVGProps<SVGSVGElement>, 'ref'> {
    backgroundColor?: CSSProperties['backgroundColor'];
}

declare const companies: string[];
type CompanyLogoProps = CompanyLogoProps$1 & {
    company?: string;
    suspenseFallback?: React.ReactNode;
};
declare function CompanyLogo({ company, className, color, width, height, suspenseFallback, ...rest }: CompanyLogoProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace CompanyLogo {
    var displayName: string;
}

type Sweden = `${'S' | 's'}${'WEDEN' | 'weden'}`;
type Estonia = `${'E' | 'e'}${'STONIA' | 'stonia'}`;
type France = `${'F' | 'f'}${'RANCE' | 'rance'}`;
type Denmark = `${'D' | 'd'}${'ENMARK' | 'enmark'}`;
type Norway = `${'N' | 'n'}${'ORWAY' | 'orway'}`;
type UK = `${'U' | 'u'}${'K' | 'k'}`;
type UnitedKingdom = `${'U' | 'u'}${'NITEDKINGDOM' | 'nitedkingdom' | 'nitedKingdom'}`;
interface FlagProps extends React.SVGProps<SVGSVGElement> {
    country: Sweden | Norway | Denmark | UK | UnitedKingdom | Estonia | France;
}
declare function Flag({ country, ...restProps }: FlagProps): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace Flag {
    var displayName: string;
}

type TopMargin$1 = 'top' | 'top-large';
type BottomMargin$1 = 'bottom' | 'bottom-large';
type Margin$1 = TopMargin$1 | BottomMargin$1 | `${TopMargin$1} ${BottomMargin$1}`;
interface WithHeadlineProps extends React.HTMLProps<HTMLHeadingElement> {
    className?: string;
    center?: boolean;
    margin?: Margin$1;
    children: React.ReactNode;
    enableResponsive?: boolean;
    alternating?: boolean;
}
interface HeadlineProps extends WithHeadlineProps {
    helperClasses: Record<string, boolean | undefined>;
}

type EightProps = HeadlineProps & {
    alternating?: boolean;
};
declare const _default$Z: {
    ({ center, margin, alternating, className, ...rest }: Omit<EightProps, "helperClasses">): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=index.d.ts.map

type FiveProps = HeadlineProps & {
    alternating?: boolean;
};
declare const _default$Y: {
    ({ center, margin, alternating, className, ...rest }: Omit<FiveProps, "helperClasses">): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=index.d.ts.map

declare const _default$X: {
    ({ center, margin, alternating, className, ...rest }: Omit<HeadlineProps, "helperClasses">): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=index.d.ts.map

declare const _default$W: {
    ({ center, margin, alternating, className, ...rest }: Omit<HeadlineProps, "helperClasses">): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};

type SevenProps = HeadlineProps & {
    alternating?: boolean;
};
declare const _default$V: {
    ({ center, margin, alternating, className, ...rest }: Omit<SevenProps, "helperClasses">): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=index.d.ts.map

type SixProps = HeadlineProps & {
    alternating?: boolean;
};
declare const _default$U: {
    ({ center, margin, alternating, className, ...rest }: Omit<SixProps, "helperClasses">): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=index.d.ts.map

declare const _default$T: {
    ({ center, margin, alternating, className, ...rest }: Omit<HeadlineProps, "helperClasses">): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=index.d.ts.map

declare const _default$S: {
    ({ center, margin, alternating, className, ...rest }: Omit<HeadlineProps, "helperClasses">): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};

interface IconProps extends React.SVGProps<SVGSVGElement> {
    className?: string;
    color?: string;
    width: string | number;
    height?: string;
    strokeWidth?: number;
    style?: React.CSSProperties;
}
declare function withIcon<P extends Record<string, unknown>>(WrappedComponent: React.FC<P & IconProps>): {
    ({ className, width, color, ...rest }: P & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
type IconType = ReturnType<typeof withIcon>;

declare const _default$R: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Accident.d.ts.map

declare const _default$Q: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Alert.d.ts.map

declare const _default$P: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Animal.d.ts.map

declare const _default$O: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ArrowDown.d.ts.map

declare const _default$N: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ArrowDownLeft.d.ts.map

declare const _default$M: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ArrowDownRight.d.ts.map

declare const _default$L: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ArrowLeft.d.ts.map

declare const _default$K: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ArrowRight.d.ts.map

declare const _default$J: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Arrows.d.ts.map

declare const _default$I: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ArrowUp.d.ts.map

declare const _default$H: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ArrowUpLeft.d.ts.map

declare const _default$G: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ArrowUpRight.d.ts.map

declare function Award({ className, color, width, ...rest }: IconProps): _emotion_react_jsx_runtime.JSX.Element;

declare const _default$F: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=BarChart.d.ts.map

declare const _default$E: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Book.d.ts.map

declare const _default$D: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=BrokenHeart.d.ts.map

declare const _default$C: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Chat.d.ts.map

declare const _default$B: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=CheckMark.d.ts.map

declare const _default$A: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ChevronDown.d.ts.map

declare const _default$z: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ChevronLeft.d.ts.map

declare const _default$y: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ChevronRight.d.ts.map

declare const _default$x: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=ChevronUp.d.ts.map

declare const _default$w: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Close.d.ts.map

declare const _default$v: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Copy.d.ts.map

declare const _default$u: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=DoughnutChart.d.ts.map

declare const _default$t: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Download.d.ts.map

declare const _default$s: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Error.d.ts.map

declare const _default$r: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Family.d.ts.map

declare const _default$q: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Filter.d.ts.map

declare const _default$p: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Guide.d.ts.map

declare const _default$o: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Globe2.d.ts.map

declare const _default$n: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Home.d.ts.map

declare const _default$m: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=House.d.ts.map

declare const _default$l: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=InfoCircle.d.ts.map

declare const _default$k: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Insurance.d.ts.map

declare const _default$j: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Insurance2.d.ts.map

declare const _default$i: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Link.d.ts.map

declare const _default$h: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Lock.d.ts.map

declare const _default$g: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=LogOut.d.ts.map

declare const _default$f: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Menu.d.ts.map

declare const _default$e: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Minus.d.ts.map

declare const _default$d: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=NotApplicable.d.ts.map

declare const _default$c: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=NoInsurance.d.ts.map

declare const _default$b: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=PieChart.d.ts.map

declare const _default$a: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Plus.d.ts.map

declare const _default$9: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Search.d.ts.map

declare const _default$8: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Settings.d.ts.map

declare const _default$7: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Success.d.ts.map

declare const _default$6: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Trash.d.ts.map

declare const _default$5: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Umbrella.d.ts.map

declare const _default$4: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Upload.d.ts.map

declare const _default$3: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=User.d.ts.map

declare const _default$2: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Vehicle.d.ts.map

declare const _default$1: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Wallet.d.ts.map

declare const _default: {
    ({ className, width, color, ...rest }: Record<string, unknown> & IconProps): _emotion_react_jsx_runtime.JSX.Element;
    displayName: string;
};
//# sourceMappingURL=Warning.d.ts.map

interface IconButtonProps extends Omit<React__default.DetailedHTMLProps<ComponentProps<'button'>, HTMLButtonElement>, 'children' | 'disabled'> {
    icon: React__default.ReactNode;
    loading?: boolean;
    disabled?: boolean;
}
declare const IconButton: React__default.FC<IconButtonProps>;

type ExtractedAnchorProps = 'rel' | 'target';
interface LinkProps extends Pick<React.HTMLProps<HTMLAnchorElement>, ExtractedAnchorProps> {
    href?: string;
    children: React.ReactNode;
    className?: string;
    title?: string;
    startIcon?: React.ComponentType<IconProps>;
    endIcon?: React.ComponentType<IconProps>;
    external?: boolean;
    linkProps?: Omit<React.HTMLProps<HTMLAnchorElement>, ExtractedAnchorProps>;
}
declare function Link({ className, title, startIcon: StartIcon, endIcon: EndIcon, external, children, linkProps, ...restProps }: LinkProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Link {
    var displayName: string;
}

interface Row$1 {
    label: React.ReactNode;
    value: React.ReactNode;
    id?: string;
}
interface ListProps extends Omit<React.HTMLProps<HTMLUListElement>, 'rows'> {
    rows: Row$1[];
    labelClassName?: string;
    valueClassName?: string;
    valueComponent?: 'HeadlineSeven' | 'ParagraphTitle' | 'ParagraphCaption';
}
declare function List({ rows, className, labelClassName, valueClassName, valueComponent, ...restProps }: ListProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace List {
    var displayName: string;
}

interface MenuProps extends React.HTMLAttributes<HTMLDivElement> {
    defaultOpen?: boolean;
    isOpen?: boolean;
    /** Hides the open/close button, component needs to be controlled if you want it to be able to open/close */
    hideMenuButton?: boolean;
    /** Open/close button stays on screen when scrolling */
    stickyMenuButton?: boolean;
    /** does not push other content to the side */
    hoverMode?: boolean;
    logo?: React.ReactNode;
    footer?: React.ReactNode;
    onOpen?: (isOpen: boolean) => void;
    desktopRightMenu?: boolean;
    desktopOnly?: boolean;
}
declare function Menu({ footer, defaultOpen, hideMenuButton, stickyMenuButton, hoverMode, logo, isOpen, onOpen, desktopRightMenu, desktopOnly, className, children, ...restProps }: MenuProps): _emotion_react_jsx_runtime.JSX.Element;

interface MenuLinkProps extends Omit<HeadlineProps, 'helperClasses'> {
    isActive?: boolean;
    className?: string;
}
declare const MenuLink: React.FC<MenuLinkProps>;

interface ExpandableMenuLinkProps extends Omit<HeadlineProps, 'helperClasses'> {
    isActive?: boolean;
    icon: React.ReactNode;
    title: string;
    defaultOpen?: boolean;
    isOpen?: boolean;
    onOpen?: (isOpen: boolean) => void;
    className?: string;
}
declare const ExpandableMenuLink: React.FC<ExpandableMenuLinkProps>;

declare function Hamburger({ open }: {
    open: boolean;
}): _emotion_react_jsx_runtime.JSX.Element;

interface ContextualMenuProps extends React__default.HTMLAttributes<HTMLDivElement> {
    openDirection?: 'left' | 'right';
    menuWidth?: CSSProperties['width'];
}
declare const ContextualMenu: React__default.FC<ContextualMenuProps>;

interface ContextualMenuItemProps extends Omit<React__default.DetailedHTMLProps<ComponentProps<'button'>, HTMLButtonElement>, 'children' | 'disabled'> {
    children: React__default.ReactNode;
    startIcon?: React__default.ReactNode;
    endIcon?: React__default.ReactNode;
    loading?: boolean;
    disabled?: boolean;
}
declare const ContextualMenuItem: React__default.FC<ContextualMenuItemProps>;

type Cell = string | ReactNode | undefined;
type Row<Id extends string> = Record<Id, Cell>;
interface Column<Id extends string> {
    id: Id;
    title: Cell;
    renderHeader?: (cell: Cell) => ReactNode;
    renderCell?: (cell: Cell, row: Row<Id>) => ReactNode;
}
type GetRowProps<Id extends string> = (row: Row<Id>) => React.HTMLProps<HTMLTableRowElement>;
type GetHeaderProps<Id extends string> = (columns: Column<Id>[]) => React.HTMLProps<HTMLTableRowElement>;
type TableContextType<Id extends string> = {
    columns: Column<Id>[];
    rows: Row<Id>[];
    getRowProps?: GetRowProps<Id>;
    getHeaderProps?: GetHeaderProps<Id>;
};
declare function useTable(): TableContextType<string>;
type TableProviderProps<Id extends string> = TableContextType<Id> & {
    children?: ReactNode;
};
declare function TableProvider<Id extends string>({ columns, rows, getRowProps, getHeaderProps, children, }: TableProviderProps<Id>): _emotion_react_jsx_runtime.JSX.Element;

interface TableProps<Id extends string> {
    className?: string;
    columns: Column<Id>[];
    rows: Row<Id>[];
    getRowProps?: GetRowProps<Id>;
    getHeaderProps?: GetHeaderProps<Id>;
    children?: ReactNode;
}
declare function Table<Id extends string>({ className, columns, rows, getRowProps, getHeaderProps, children, }: TableProps<Id>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Table {
    var displayName: string;
}

declare function TableBody(): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableBody {
    var displayName: string;
}

interface TableHeaderProps extends React.HTMLProps<HTMLTableSectionElement> {
    children?: React.ReactNode;
}
declare function TableHeader({ children }: TableHeaderProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableHeader {
    var displayName: string;
}

interface RowTwo<Id extends string> {
    id: string;
    values: Record<Id, ReactNode>;
}
interface ColumnTwo<Id extends string> {
    id: Id;
    title: ReactNode;
    canBeSorted?: boolean;
    customSorting?: (rowA: RowTwo<Id>, rowB: RowTwo<Id>) => number;
    renderHeader?: (cell: ReactNode) => ReactNode;
    renderCell?: (cell: ReactNode, row: RowTwo<Id>) => ReactNode;
}
type GetRowPropsTwo<Id extends string> = (row: RowTwo<Id>) => React.HTMLProps<HTMLTableRowElement>;
type GetHeaderPropsTwo<Id extends string> = (columns: ColumnTwo<Id>[]) => React.HTMLProps<HTMLTableRowElement>;
type GetColumnPropsTwo<Id extends string> = (column: ColumnTwo<Id>) => Omit<React.HTMLProps<HTMLElement>, 'ref'>;
type TableContextTwoType<Id extends string> = {
    columns: ColumnTwo<Id>[];
    sortedRows: RowTwo<Id>[];
    sort: {
        columnId: Id | undefined;
        asc: boolean;
    };
    getRowProps?: GetRowPropsTwo<Id>;
    getHeaderProps?: GetHeaderPropsTwo<Id>;
    getColumnProps?: GetColumnPropsTwo<Id>;
    toggleColumnSorting: (columnId: Id) => void;
    renderRow?: (row: RowTwo<Id>, index: number, array: RowTwo<Id>[]) => ReactNode;
};
type TableProviderTwoProps<Id extends string> = Omit<TableContextTwoType<Id>, 'toggleColumnSorting' | 'sortedRows' | 'sort'> & {
    children?: ReactNode;
    rows: RowTwo<Id>[];
};

declare function useTableTwo(): TableContextTwoType<string>;
declare function TableProviderTwo<Id extends string>({ columns, rows, getRowProps, getHeaderProps, getColumnProps, renderRow, children, }: TableProviderTwoProps<Id>): _emotion_react_jsx_runtime.JSX.Element;

interface TablePropsTwo<Id extends string> {
    className?: string;
    columns: ColumnTwo<Id>[];
    rows: RowTwo<Id>[];
    getRowProps?: GetRowPropsTwo<Id>;
    getHeaderProps?: GetHeaderPropsTwo<Id>;
    getColumnProps?: GetColumnPropsTwo<Id>;
    renderRow?: (row: RowTwo<Id>, index: number, array: RowTwo<Id>[]) => ReactNode;
    children?: ReactNode;
}
declare function TableTwo<Id extends string>({ className, columns, rows, getRowProps, getHeaderProps, getColumnProps, renderRow, children, }: TablePropsTwo<Id>): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableTwo {
    var displayName: string;
}

declare function TableBodyTwo(): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableBodyTwo {
    var displayName: string;
}

interface TableHeaderTwoProps extends Omit<React.HTMLProps<HTMLTableSectionElement>, 'size' | 'children'> {
    size?: 'small' | 'large';
    children?: React.ReactNode;
}
declare function TableHeaderTwo({ children, size }: TableHeaderTwoProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace TableHeaderTwo {
    var displayName: string;
}

interface TabsProps extends Omit<React.HTMLProps<HTMLUListElement>, 'onChange'> {
    items: string[];
    activeTab: string;
    onChange: (tab: string) => void;
}
declare function Tabs({ className, items, activeTab, onChange, ...restProps }: TabsProps): _emotion_react_jsx_runtime.JSX.Element;

type ExtractedInputProps$2 = 'disabled' | 'defaultValue' | 'id' | 'inputMode' | 'maxLength' | 'name' | 'onChange' | 'onBlur' | 'pattern' | 'placeholder' | 'required' | 'rows' | 'type' | 'value';
interface BaseTextAreaProps extends Pick<React.HTMLProps<HTMLTextAreaElement>, ExtractedInputProps$2> {
    className?: React.HTMLProps<HTMLDivElement>['className'];
    endAdornment?: ReactNode;
    error?: boolean;
    helperText?: string;
    startAdornment?: ReactNode;
    style?: React.HTMLProps<HTMLDivElement>['style'];
    textLine?: boolean;
    textAreaSize?: string;
    inputProps?: Omit<React.HTMLProps<HTMLTextAreaElement>, ExtractedInputProps$2>;
}
type TextAreaProps = (BaseTextAreaProps & {
    label: React.ReactNode;
    'aria-label'?: string;
}) | (BaseTextAreaProps & {
    label?: never;
    'aria-label': string;
});
declare const TextArea: React$1.ForwardRefExoticComponent<TextAreaProps & React$1.RefAttributes<HTMLTextAreaElement>>;

type ExtractedInputProps$1 = 'disabled' | 'defaultValue' | 'id' | 'inputMode' | 'maxLength' | 'name' | 'onChange' | 'onBlur' | 'pattern' | 'placeholder' | 'required' | 'type' | 'value' | 'autoFocus';
type HTMLInputType = 'color' | 'date' | 'datetime-local' | 'email' | 'month' | 'number' | 'password' | 'tel' | 'text' | 'time' | 'url' | 'week';
interface BaseTextInputProps extends Pick<React.HTMLProps<HTMLInputElement>, ExtractedInputProps$1> {
    className?: React.HTMLProps<HTMLDivElement>['className'];
    endAdornment?: ReactNode;
    error?: boolean;
    helperText?: string;
    startAdornment?: ReactNode;
    style?: React.HTMLProps<HTMLDivElement>['style'];
    textLine?: boolean;
    textInputSize?: string;
    type?: HTMLInputType;
    inputProps?: Omit<React.HTMLProps<HTMLInputElement>, ExtractedInputProps$1>;
}
type TextInputProps = (BaseTextInputProps & {
    label: React.ReactNode;
    'aria-label'?: string;
}) | (BaseTextInputProps & {
    label?: never;
    'aria-label': string;
});
declare const TextInput: React$1.ForwardRefExoticComponent<TextInputProps & React$1.RefAttributes<HTMLInputElement>>;

interface ToggleProps extends Omit<React.HTMLProps<HTMLLabelElement>, 'value' | 'ref'> {
    label?: string;
    inactiveLabel?: string;
    value: boolean;
    onClick: () => void;
}
declare const Toggle: React$1.ForwardRefExoticComponent<ToggleProps & React$1.RefAttributes<HTMLInputElement>>;

declare enum TooltipPosition {
    top = "top",
    bottom = "bottom",
    left = "left",
    right = "right"
}
interface TooltipProps extends Omit<React.HTMLProps<HTMLDivElement>, 'content' | 'ref' | 'onMouseEnter' | 'onMouseLeave' | 'className'> {
    backgroundColor?: string;
    content: React.ReactNode;
    position?: keyof typeof TooltipPosition;
    contentStyle?: React.CSSProperties;
}
declare function Tooltip({ contentStyle, style, backgroundColor, color, content, position, children, ...restProps }: TooltipProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Tooltip {
    var displayName: string;
}

type TopMargin = 'top' | 'top-large';
type BottomMargin = 'bottom' | 'bottom-large';
type Margin = TopMargin | BottomMargin | `${TopMargin} ${BottomMargin}`;
interface ParagraphProps extends React.HTMLProps<HTMLParagraphElement> {
    margin?: Margin;
    center?: boolean;
}
declare function Paragraph({ children, margin, center, className, ...props }: ParagraphProps): _emotion_react_jsx_runtime.JSX.Element;

declare const ParagraphBody: typeof Paragraph;
declare const ParagraphBodySmall: typeof Paragraph;
declare const ParagraphPreamble: typeof Paragraph;
declare const ParagraphTiny: typeof Paragraph;
declare const ParagraphCaption: typeof Paragraph;
declare const ParagraphTitle: typeof Paragraph;
declare const ParagraphTitleSmall: typeof Paragraph;

interface BasicProps {
    maxValue?: number;
    isComplete?: boolean;
}
interface UncontrolledProgressBarProps extends BasicProps, React.HTMLProps<HTMLDivElement> {
    initialProgressValue?: number;
    duration?: number;
    value?: never;
}
interface ControlledProgressBarProps extends BasicProps, React.HTMLProps<HTMLDivElement> {
    initialProgressValue?: never;
    duration?: never;
    value: number;
}
type ProgressBarProps = UncontrolledProgressBarProps | ControlledProgressBarProps;
declare function ProgressBar(props: ProgressBarProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ProgressBar {
    var displayName: string;
}

type BaseProgressCircleProps = Omit<React.HTMLProps<HTMLDivElement>, 'value' | 'min' | 'max'>;
type TimedProgressCircleProps = {
    duration?: number;
    min?: number;
    max?: number;
    value?: never;
};
type ControlledProgressCircleProps = {
    duration?: never;
    min?: never;
    max?: never;
    value: number;
};
type ProgressCircleProps = BaseProgressCircleProps & (TimedProgressCircleProps | ControlledProgressCircleProps);
declare function ProgressCircle({ duration, min, max, value, className, ...rest }: ProgressCircleProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ProgressCircle {
    var displayName: string;
}

type ExtractedContainerHtmlProps = 'className' | 'style';
type BaseRadioGroupProps = PropsWithChildren<Pick<React.HTMLProps<HTMLFieldSetElement>, ExtractedContainerHtmlProps> & {
    error?: boolean;
    fullWidth?: boolean;
    helperText?: string;
    containerHtmlProps?: Omit<React.HTMLProps<HTMLFieldSetElement>, ExtractedContainerHtmlProps | 'aria-label'>;
    size?: 'small' | 'large';
    variant?: 'default' | 'card';
    alternating?: boolean;
    columns?: string;
    columnWidth?: string;
}>;
type RadioGroupWithLabelProps = BaseRadioGroupProps & {
    label: string;
    'aria-label'?: React.HTMLProps<HTMLFieldSetElement>['aria-label'];
};
type RadioGroupWithoutLabelProps = BaseRadioGroupProps & {
    label?: never;
    'aria-label': React.HTMLProps<HTMLFieldSetElement>['aria-label'];
};
type RadioGroupProps = RadioGroupWithLabelProps | RadioGroupWithoutLabelProps;

declare const RadioGroup: React$1.ForwardRefExoticComponent<RadioGroupProps & React$1.RefAttributes<HTMLFieldSetElement>>;

type ExtractedInputProps = 'disabled' | 'checked' | 'defaultChecked' | 'id' | 'name' | 'onChange' | 'onBlur' | 'required' | 'value';
interface RadioButtonProps extends Pick<React__default.HTMLProps<HTMLInputElement>, ExtractedInputProps> {
    label: React__default.ReactNode;
    'aria-label'?: string;
    className?: React__default.HTMLProps<HTMLLabelElement>['className'];
    inputProps?: Omit<React__default.HTMLProps<HTMLInputElement>, ExtractedInputProps>;
}
declare const RadioButton: React__default.ForwardRefExoticComponent<RadioButtonProps & React__default.RefAttributes<HTMLInputElement>>;

interface SliderProps extends React__default.HTMLProps<HTMLDivElement> {
    label: string;
    subParagraph?: string;
    startUnit?: string;
    endUnit?: string;
    min: number;
    max: number;
    step?: number;
    value: number;
    setValue: (value: number) => void;
    valueFormatter?: (value: number) => React__default.ReactNode;
    allowManualInput?: boolean;
}
declare function Slider({ label, subParagraph, startUnit, endUnit, min, max, step, value, setValue, valueFormatter, allowManualInput, ...restProps }: SliderProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Slider {
    var displayName: string;
}

declare const standardColors: readonly ["red", "yellow", "green"];
type StandardColor = (typeof standardColors)[number];
interface StatusTextProps extends Omit<React.HTMLProps<HTMLDivElement>, 'color'> {
    color: StandardColor | string;
    text: string | JSX.Element;
}
declare function StatusText({ color, text, ...restProps }: StatusTextProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace StatusText {
    var displayName: string;
}

interface ContentLoaderProps extends Omit<React.HTMLProps<HTMLDivElement>, 'size' | 'color'> {
    size?: 'default' | 'large' | 'small';
    color?: 'white';
}
declare function ContentLoader({ className, size, color, ...restProps }: ContentLoaderProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ContentLoader {
    var displayName: string;
}

declare const Loader: {
    Content: typeof ContentLoader;
};

interface ExpandableSectionBaseProps extends Omit<React.HTMLProps<HTMLDivElement>, 'size' | 'onClick' | 'title'> {
    children: React.ReactNode;
    isOpenOnLoad?: boolean;
    className?: string;
    size?: 'medium' | 'large';
    onClick?: (isOpen: boolean) => void;
    controllerId?: string;
    contentPadding?: boolean;
}
interface ExpandableSectionRegularTitleProps extends ExpandableSectionBaseProps {
    title: string;
}
interface ExpandableSectionCustomTitleProps extends ExpandableSectionBaseProps {
    title: React.ReactNode;
}
type ExpandableSectionProps = ExpandableSectionRegularTitleProps | ExpandableSectionCustomTitleProps;
declare function ExpandableSection({ title, children, isOpenOnLoad, className, size, onClick, controllerId, contentPadding, ...rest }: ExpandableSectionProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace ExpandableSection {
    var displayName: string;
}

type NotificationProps = {
    headline?: string;
    description?: never;
    children?: JSX.Element;
    status: 'info' | 'error' | 'warning';
    customIcon?: JSX.Element;
    className?: string;
} | {
    headline?: string;
    description?: string;
    children?: never;
    status: 'info' | 'error' | 'warning';
    customIcon?: JSX.Element;
    className?: string;
};
declare function Notification({ headline, description, status, children, customIcon, className, ...restProps }: NotificationProps): _emotion_react_jsx_runtime.JSX.Element;
declare namespace Notification {
    var displayName: string;
}

declare function useUniqueId(prefix: string): string;
declare const pick: <O, P extends (keyof O)[]>(obj: O, pickList: P) => Pick<O, P[number]>;
declare const useClickOutside: <T extends HTMLElement>(onBlur: () => void) => {
    selectRef: React$1.RefObject<T>;
};
declare const useTimeout: (callback: undefined | (() => void), delay: null | number) => () => void;

declare const formatDate: (date: string | Date, locale: Locale) => string;

interface UrlFont {
    url: string;
    weight: AllowedFontWeight;
}
type AllowedFontWeight = '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';
interface WebSafeFont {
    webSafeFont: string;
    weight: AllowedFontWeight;
}
type Font = UrlFont | WebSafeFont;
interface UIFonts {
    headlineFont?: Partial<Font>;
}
interface UITheme {
    colorBrand: string;
    colorInteractive: string;
    colorWarning: string;
    colorError: string;
    colorSuccess: string;
    colorInfo: string;
    colorSurfaceAlternateTableRow: string;
    colorSurfaceButtonPrimary: string;
    colorSurfaceButtonSecondary: string;
    colorHeadline: string;
    colorBody: string;
    colorOnSurfaceButtonPrimary: string;
    colorOnSurfaceButtonSecondary: string;
    colorLink: string;
    radiusButton: string;
    radiusInteractiveElements: string;
}

interface AppContextProviderProps {
    theme?: Partial<UITheme>;
    fonts?: Partial<UIFonts>;
    deBrandedLogos?: boolean;
}
declare const InsurelyUIContext: React$1.Context<AppContextProviderProps>;
declare const InsurelyUIProvider: ({ theme, fonts, deBrandedLogos, children, }: PropsWithChildren<AppContextProviderProps>) => _emotion_react_jsx_runtime.JSX.Element | null;

interface HelperTextProps {
    className?: string;
    text?: string;
    error?: boolean;
}
declare function HelperText({ className, error, text, ...restProps }: HelperTextProps): _emotion_react_jsx_runtime.JSX.Element | null;
declare namespace HelperText {
    var displayName: string;
}

export { AllowedFontWeight, AppContextProviderProps, Avatar, AvatarProps, AvatarStandardColor, Banner, BannerProps, BaseCheckboxProps, Button, ButtonIconPosition, ButtonProps, ButtonSize, ButtonVariant, Card, CardBaseProps, CardButtonProps, CardDivProps, CardProps, CardWithIcon, CardWithIconProps, Cell, Checkbox, CheckboxProps, CheckboxWithChildrenProps, CheckboxWithLabelProps, Color, Column, ColumnTwo, CompanyLogo, CompanyLogoProps, ContentLoaderProps, ContextualMenu, ContextualMenuItem, ContextualMenuItemProps, ContextualMenuProps, ExpandableMenuLink, ExpandableMenuLinkProps, ExpandableSection, ExpandableSectionProps, Flag, FlagProps, Font, GetColumnPropsTwo, GetHeaderProps, GetHeaderPropsTwo, GetRowProps, GetRowPropsTwo, HTMLInputType, Hamburger, _default$Z as HeadlineEight, _default$Y as HeadlineFive, _default$X as HeadlineFour, _default$W as HeadlineOne, HeadlineProps, _default$V as HeadlineSeven, _default$U as HeadlineSix, _default$T as HeadlineThree, _default$S as HeadlineTwo, HelperText, HelperTextProps, _default$R as IconAccident, _default$Q as IconAlert, _default$P as IconAnimal, _default$O as IconArrowDown, _default$N as IconArrowDownLeft, _default$M as IconArrowDownRight, _default$L as IconArrowLeft, _default$K as IconArrowRight, _default$I as IconArrowUp, _default$H as IconArrowUpLeft, _default$G as IconArrowUpRight, _default$J as IconArrows, Award as IconAward, _default$F as IconBarChart, _default$E as IconBook, _default$D as IconBrokenHeart, IconButton, IconButtonProps, _default$C as IconChat, _default$B as IconCheckMark, _default$A as IconChevronDown, _default$z as IconChevronLeft, _default$y as IconChevronRight, _default$x as IconChevronUp, _default$w as IconClose, _default$v as IconCopy, _default$u as IconDoughnutChart, _default$t as IconDownload, _default$s as IconError, _default$r as IconFamily, _default$q as IconFilter, _default$o as IconGlobe2, _default$p as IconGuide, _default$n as IconHome, _default$m as IconHouse, _default$l as IconInfoCircle, _default$k as IconInsurance, _default$j as IconInsurance2, _default$i as IconLink, _default$h as IconLock, _default$g as IconLogOut, _default$f as IconMenu, _default$e as IconMinus, _default$c as IconNoInsurance, _default$d as IconNotApplicable, _default$b as IconPieChart, _default$a as IconPlus, IconProps, _default$9 as IconSearch, _default$8 as IconSettings, _default$7 as IconSuccess, _default$6 as IconTrash, IconType, _default$5 as IconUmbrella, _default$4 as IconUpload, _default$3 as IconUser, _default$2 as IconVehicle, _default$1 as IconWallet, _default as IconWarning, InsurelyUIContext, InsurelyUIProvider, Link, LinkProps, List, ListProps, Loader, Menu, MenuLink, MenuLinkProps, MenuProps, Notification, NotificationProps, ParagraphBody, ParagraphBodySmall, ParagraphCaption, ParagraphPreamble, ParagraphProps, ParagraphTiny, ParagraphTitle, ParagraphTitleSmall, ProgressBar, ProgressBarProps, ProgressCircle, RadioButton, RadioButtonProps, RadioGroup, RadioGroupProps, RadioGroupWithLabelProps, RadioGroupWithoutLabelProps, Row, RowTwo, Slider, SliderProps, StatusText, StatusTextProps, Table, TableBody, TableBodyTwo, TableContextTwoType, TableHeader, TableHeaderProps, TableHeaderTwo, TableHeaderTwoProps, TableProps, TablePropsTwo, TableProvider, TableProviderTwo, TableProviderTwoProps, TableTwo, Tabs, TabsProps, TextArea, TextAreaProps, TextInput, TextInputProps, Toggle, ToggleProps, Tooltip, TooltipPosition, TooltipProps, UIFonts, UITheme, UrlFont, WebSafeFont, companies, formatDate, pick, useClickOutside, useTable, useTableTwo, useTimeout, useUniqueId };
//# sourceMappingURL=index.d.ts.map
